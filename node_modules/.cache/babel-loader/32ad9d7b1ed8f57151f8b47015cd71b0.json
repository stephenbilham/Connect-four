{"ast":null,"code":"var _jsxFileName = \"/Users/stephenbilham/Desktop/WebDev/Connect-four/src/Board.js\";\nimport React, { useState } from 'react';\nimport Square from \"./Square.js\";\nimport wc from \"./WinningConditions.js\";\nimport winningConditions from './WinningConditions.js';\nlet squares = Array(42).fill(0);\nlet player1 = [];\nlet player2 = [];\nlet winningPlayer = 0;\nlet player1Turn = true;\nlet gameOver = false;\nlet hoverColumn = -1;\nlet animationRunning = false;\nlet baseSpeed = 1.25;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.finalTop = {\n      \"--finalTop\": \"500%\"\n    };\n    this.dropTime = {\n      \"--dropTime\": \"1.5s\"\n    };\n\n    this.resetButton = () => {\n      squares = Array(42).fill(0);\n      player1 = [];\n      player2 = [];\n      winningPlayer = 0;\n      player1Turn = true;\n      gameOver = false;\n      this.setState({\n        updated: !this.state.updated\n      });\n    };\n\n    this.boardHandleClick = index => {\n      //function to find player turn/ print players id in square with onclick\n      // ex. if (player1Turn === true ? return 1 : 2)\n      //change value of square at index\n      if (squares[index] != 0) {\n        return;\n      }\n\n      if (gameOver) {\n        return;\n      }\n\n      let column = index % 7;\n      let columnArr = [];\n\n      for (let i = 0; i < 6; i++) {\n        columnArr.push(i * 7 + column);\n      }\n\n      let targetSquare = columnArr[0];\n\n      for (let i = columnArr.length - 1; i >= 0; i--) {\n        if (squares[columnArr[i]] === 0) {\n          targetSquare = columnArr[i];\n          break;\n        }\n      } // console.log(index, column)\n\n\n      squares[targetSquare] = player1Turn ? 1 : 2;\n\n      if (player1Turn) {\n        player1.push(targetSquare);\n      } else {\n        player2.push(targetSquare);\n      }\n\n      player1Turn = !player1Turn;\n\n      if (this.checkIfWinner(1)) {\n        gameOver = true;\n        winningPlayer = 1;\n        alert(\"Player 1 wins\");\n      } else if (this.checkIfWinner(2)) {\n        gameOver = true;\n        winningPlayer = 2;\n        alert(\"Player 2 wins\");\n      }\n\n      this.setState({\n        updated: !this.state.updated\n      });\n    };\n\n    this.checkIfWinner = playerID => {\n      let playerArr = playerID === 1 ? player1 : player2;\n      let winningConditions = wc.getAllWinConditions();\n      let playerWins = false;\n\n      for (let i = 0; i < winningConditions.length; i++) {\n        let curWinningConditions = winningConditions[i];\n        playerWins = true;\n\n        for (let j = 0; j < curWinningConditions.length; j++) {\n          if (!playerArr.includes(curWinningConditions[j])) {\n            playerWins = false;\n            break;\n          }\n        }\n\n        if (playerWins) {\n          break;\n        }\n      }\n\n      return playerWins;\n    };\n\n    this.state = {\n      updated: false\n    };\n  }\n\n  render() {\n    let grid = squares.map((element, i) => {\n      return React.createElement(Square, {\n        key: i.toString(),\n        id: i,\n        value: element,\n        squareHandleClick: this.boardHandleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, grid), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"button\",\n      onClick: this.resetButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Reset Game\")));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/stephenbilham/Desktop/WebDev/Connect-four/src/Board.js"],"names":["React","useState","Square","wc","winningConditions","squares","Array","fill","player1","player2","winningPlayer","player1Turn","gameOver","hoverColumn","animationRunning","baseSpeed","Board","Component","constructor","props","finalTop","dropTime","resetButton","setState","updated","state","boardHandleClick","index","column","columnArr","i","push","targetSquare","length","checkIfWinner","alert","playerID","playerArr","getAllWinConditions","playerWins","curWinningConditions","j","includes","render","grid","map","element","toString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Square from \"./Square.js\";\nimport wc from \"./WinningConditions.js\"\nimport winningConditions from './WinningConditions.js';\n\nlet squares = Array(42).fill(0);\nlet player1 = [];\nlet player2 = [];\nlet winningPlayer = 0;\nlet player1Turn = true;\nlet gameOver = false;\nlet hoverColumn = -1\nlet animationRunning = false\nlet baseSpeed = 1.25;\n\n\n\nclass Board extends React.Component {\n    constructor (props) {\n        super(props)\n         this.state = {\n            updated: false\n        }\n    }\n\n    finalTop = {\n        \"--finalTop\": \"500%\"\n      };\n    dropTime = {\n        \"--dropTime\": \"1.5s\"\n      };\n\n\n        // IF square id/value? is !0 return (so players cannot click on the piece again) \n\n        // push the playersTurn into the independent players empty array \n\n        // if player array contains an array of === possible winning conditons game over \n        //if not keep playing \n        \n\n        // reset grid to default value whenever \n        resetButton = () => {\n             squares = Array(42).fill(0);\n             player1 = [];\n             player2 = [];\n             winningPlayer = 0;\n             player1Turn = true;\n             gameOver = false;\n             this.setState({updated: !this.state.updated})\n        }\n\n        //  player1 = []\n        // player2 = []\n\n        // make handleclick number 2 \n    boardHandleClick = (index) => { \n        //function to find player turn/ print players id in square with onclick\n        // ex. if (player1Turn === true ? return 1 : 2)\n        //change value of square at index\n        if (squares[index] != 0) { \n            return \n        }\n        if (gameOver) { \n            return\n        }\n        let column = index % 7\n        let columnArr = []\n        for (let i = 0; i < 6; i++){\n            columnArr.push(i*7 + column)\n        }\n        let targetSquare = columnArr[0]\n        for (let i = columnArr.length - 1; i >= 0; i--) { \n            if(squares[columnArr[i]] === 0) { \n                targetSquare = columnArr[i]\n                break;\n            }\n        }\n        // console.log(index, column)\n        squares[targetSquare] =  player1Turn ? 1 : 2\n        if (player1Turn) {\n            player1.push(targetSquare)\n        }\n        else {\n            player2.push(targetSquare)\n        }\n        player1Turn = !player1Turn\n        if(this.checkIfWinner(1)){\n            gameOver = true \n            winningPlayer = 1\n            alert(\"Player 1 wins\")\n        } else if(this.checkIfWinner(2)){\n            gameOver = true\n            winningPlayer = 2\n            alert(\"Player 2 wins\")\n        }\n        this.setState({updated: !this.state.updated})\n    }\n    //playerID is 1 for player1 and 2 for player2\n    \n   \n    checkIfWinner = (playerID) => { \n        let playerArr = playerID === 1 ? player1 : player2\n        let winningConditions = wc.getAllWinConditions()\n        let playerWins = false\n        for (let i = 0;i < winningConditions.length; i++) {\n            let curWinningConditions = winningConditions[i]\n            playerWins = true\n            for(let j = 0; j < curWinningConditions.length; j++) {\n                if (!playerArr.includes(curWinningConditions[j])){\n                    playerWins = false\n                    break;\n                }\n            }\n            if(playerWins){\n                break;\n            }\n        }\n        return playerWins\n    }\n    \n \n    render(){\n\n        let grid = squares.map((element, i) => {\n             return (\n                 <Square key={i.toString()} id={i} value={element} squareHandleClick={this.boardHandleClick}></Square>\n             )\n        })\n        \n      return (\n        <div>\n            <div  className = \"grid\">\n                {grid}\n            </div>   \n            <div>\n                <button className=\"button\" onClick={this.resetButton}>Reset Game</button>\n            </div>\n        </div>\n       \n      );\n    }\n  }\n  \n  \n\nexport default Board;\n\n\n"]},"metadata":{},"sourceType":"module"}