{"ast":null,"code":"var _jsxFileName = \"/Users/stephenbilham/Desktop/WebDev/Connect-four/src/Board.js\";\nimport React, { useState } from 'react';\nimport Square from \"./Square.js\";\nlet squares = Array(42).fill(0);\nlet player1 = [];\nlet player2 = [];\nlet winningPlayer = 0;\nlet player1Turn = true;\nlet gameOver = false;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.resetButton = () => {\n      squares = Array(42).fill(0);\n      player1 = [];\n      player2 = [];\n      winningPlayer = 0; //  let player1Turn = true;\n      //  let gameOver = false;\n    };\n\n    this.boardHandleClick = index => {\n      //function to find player turn/ print players id in square with onclick\n      // ex. if (player1Turn === true ? return 1 : 2)\n      //change value of square at index\n      if (squares[index] != 0) {\n        return;\n      }\n\n      if (gameOver) {\n        return;\n      }\n\n      let column = index % 7;\n      let columnArr = [];\n\n      for (let i = 0; i < 6; i++) {\n        columnArr.push(i * 7 + column);\n      }\n\n      let targetSquare = columnArr[0];\n\n      for (let i = columnArr.length - 1; i >= 0; i--) {\n        if (squares[columnArr[i]] === 0) {\n          targetSquare = columnArr[i];\n          break;\n        }\n      }\n\n      console.log(index, column);\n      squares[targetSquare] = player1Turn ? 1 : 2;\n      player1Turn = !player1Turn;\n      this.setState({\n        updated: !this.state.updated\n      });\n    };\n\n    this.state = {\n      updated: false\n    };\n  } // IF square id/value? is !0 return (so players cannot click on the piece again) \n  // push the playersTurn into the independent players empty array \n  // if player array contains an array of === possible winning conditons game over \n  //if not keep playing \n  // reset grid to default value whenever \n\n\n  render() {\n    //create a lines for the SQUARES of the grid ex 1px solid, black\n    let grid = squares.map((element, i) => {\n      return React.createElement(Square, {\n        key: i.toString(),\n        id: i,\n        value: element,\n        squareHandleClick: this.boardHandleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, grid), React.createElement(\"button\", {\n      onclick: this.resetButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Reset Game\"));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/stephenbilham/Desktop/WebDev/Connect-four/src/Board.js"],"names":["React","useState","Square","squares","Array","fill","player1","player2","winningPlayer","player1Turn","gameOver","Board","Component","constructor","props","resetButton","boardHandleClick","index","column","columnArr","i","push","targetSquare","length","console","log","setState","updated","state","render","grid","map","element","toString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Square from \"./Square.js\";\n\nlet squares = Array(42).fill(0);\nlet player1 = [];\nlet player2 = [];\nlet winningPlayer = 0;\nlet player1Turn = true;\nlet gameOver = false;\n\nclass Board extends React.Component {\n    constructor (props) {\n        super(props)\n         this.state = {\n            updated: false\n        }\n    }\n\n\n        // IF square id/value? is !0 return (so players cannot click on the piece again) \n\n        // push the playersTurn into the independent players empty array \n\n        // if player array contains an array of === possible winning conditons game over \n        //if not keep playing \n        \n\n        // reset grid to default value whenever \n        resetButton = () => {\n             squares = Array(42).fill(0);\n             player1 = [];\n             player2 = [];\n             winningPlayer = 0;\n            //  let player1Turn = true;\n            //  let gameOver = false;\n\n        }\n        //  player1 = []\n        // player2 = []\n\n        // make handleclick number 2 \n    boardHandleClick = (index) => { \n        //function to find player turn/ print players id in square with onclick\n        // ex. if (player1Turn === true ? return 1 : 2)\n        //change value of square at index\n        if (squares[index] != 0) { \n            return \n        }\n        if (gameOver) { \n            return\n        }\n        let column = index % 7\n        let columnArr = []\n        for (let i = 0; i < 6; i++){\n            columnArr.push(i*7 + column)\n        }\n        let targetSquare = columnArr[0]\n        for (let i = columnArr.length - 1; i >= 0; i--) { \n            if(squares[columnArr[i]] === 0) { \n                targetSquare = columnArr[i]\n                break;\n            }\n        }\n\n        \n        console.log(index, column)\n        squares[targetSquare] =  player1Turn ? 1 : 2\n        player1Turn = !player1Turn\n\n\n        this.setState({updated: !this.state.updated})\n    }\n\n\n    render(){\n\n        //create a lines for the SQUARES of the grid ex 1px solid, black\n\n        let grid = squares.map((element, i) => {\n             return (\n                 <Square key={i.toString()} id={i} value={element} squareHandleClick={this.boardHandleClick}></Square>\n             )\n        })\n        \n      return (\n        <div>\n            <div  className = \"grid\">\n                {grid}\n            </div>   \n            <button onclick={this.resetButton}>Reset Game</button>\n        </div>\n       \n      );\n    }\n  }\n  \n  \n\nexport default Board;\n\n"]},"metadata":{},"sourceType":"module"}